name: CI Pipeline

on:
  push:
    branches: [main, develop, feat/ci]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: npm
          cache-dependency-path: api/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./api

      - name: Run ESLint
        run: npx eslint . --ext .js,.mjs,.cjs --fix
        working-directory: ./api

  test:
    name: Run Unit + Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: npm
          cache-dependency-path: api/package-lock.json

      - name: Start PostgreSQL (Docker)
        run: |
          docker rm -f pg || true
          docker run --name pg -d \
            -e POSTGRES_USER=test_user \
            -e POSTGRES_PASSWORD=test_password \
            -e POSTGRES_DB=test_db \
            -p 5432:5432 \
            -v "${{ github.workspace }}/db":/docker-entrypoint-initdb.d:ro \
            postgres:16-alpine
          # Wait for PostgreSQL to be ready
          for i in {1..30}; do
            if docker exec pg pg_isready -U test_user -d test_db; then echo "Postgres is ready"; break; fi; sleep 2; done

      - name: Install dependencies
        run: npm ci
        working-directory: ./api

      - name: Run unit tests (coverage)
        run: npm run test:coverage
        working-directory: ./api
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          POSTGRES_HOST: localhost

      - name: Run integration tests
        run: npm run test:integration
        working-directory: ./api
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432

  security:
    name: NPM Audit Security Scan
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: npm
          cache-dependency-path: api/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./api

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        working-directory: ./api

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image repo
        id: repo
        shell: bash
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${OWNER_LC}/dernier-metro-api"
          echo "owner=${OWNER_LC}" >> "$GITHUB_OUTPUT"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile.v1
          push: true
          tags: |
            ${{ steps.repo.outputs.image }}:latest
            ${{ steps.repo.outputs.image }}:${{ github.sha }}

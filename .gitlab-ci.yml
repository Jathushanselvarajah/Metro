# GitLab CI pipeline covering lint, unit + integration tests, Docker build, and security scan
# Notes:
# - Integration tests expect PostgreSQL on localhost:5432 (tests force POSTGRES_HOST="localhost").
#   We start a Postgres container via DinD and publish 5432 to the job. This requires a privileged runner.
# - Use npm ci for reproducible, fast installs.

stages:
  - lint
  - test
  - build

variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  # For docker:dind
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: "tcp://docker:2375"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm/

# Lint (optional)
lint:eslint:
  stage: lint
  image: node:22-alpine
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
  script:
    - cd api
    - npm ci
    - npm run lint

# Unit tests only (no DB)
test:unit:
  stage: test
  image: node:22-alpine
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
  script:
    - cd api
    - npm ci
    - npm test

# Integration tests with PostgreSQL via Docker-in-Docker
# Requires privileged runner for docker:dind
# If your runner is not privileged, consider skipping this job or switching to services with tests adjusted for hostnames.
test:integration:
  stage: test
  image: node:22-alpine
  services:
    - name: docker:24-dind
      alias: docker
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
  before_script:
    - apk add --no-cache docker-cli bash
  script:
    - |
      # Start Postgres exposing localhost:5432 and auto-run schema/seed
      docker rm -f pg || true
      docker run --name pg -d \
        -e POSTGRES_USER=test_user \
        -e POSTGRES_PASSWORD=test_password \
        -e POSTGRES_DB=test_db \
        -p 5432:5432 \
        -v "$CI_PROJECT_DIR/db":/docker-entrypoint-initdb.d:ro \
        postgres:16-alpine
    - |
      # Wait for DB to be ready
      for i in $(seq 1 30); do
        if docker exec pg pg_isready -U test_user -d test_db; then echo "Postgres ready"; break; fi; sleep 2;
      done
    - cd api
    - npm ci
    - POSTGRES_USER=test_user POSTGRES_PASSWORD=test_password POSTGRES_DB=test_db POSTGRES_HOST=localhost POSTGRES_PORT=5432 npm run test:integration

# Build and push Docker image to GitLab Registry on main only
build:docker:
  stage: build
  image: docker:24
  services:
    - name: docker:24-dind
      alias: docker
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - cd api
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE:latest" -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" -f Dockerfile.v1 .
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"

# Security scans (allow failure so it doesn't block dev flow)
security:npm-audit:
  stage: test
  image: node:22-alpine
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
  script:
    - cd api
    - npm ci
    - npm audit --audit-level=moderate
  allow_failure: true
